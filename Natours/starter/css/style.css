@keyframes moveInLeft {
  0% {
    opacity: 0;
    /**
     * Translates the element horizontally by 100 pixels to the left.
     */
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(2rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(10rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
:root {
  box-sizing: border-box;
  --light-green: #7ed56f;
  --medium-green: #55c57a;
  --dark-green: #28b485;
  --semi-transparent-green: rgba(126, 213, 111, 0.8);
  --semi-transparent-blue: rgba(52, 172, 224, 0.8);
  font-size: 62.5%;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

a {
  color: inherit;
  text-decoration: none;
}

body {
  /* 
      Font-related properties are inherited 
  */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777;
  padding: 3rem;
}

/* The .btn:link and .btn:visited selectors target buttons in their default and visited states respectively */
.btn {
  /* Converts text to uppercase */
  text-transform: uppercase;
  /* Removes any text decoration like underline */
  text-decoration: none;
  /* Makes the element inline-block */
  display: inline-block;
  /* Adds padding of 15px top and bottom, 40px left and right */
  padding: 1.5rem 4rem;
  /* Makes the corners of the button rounded */
  border-radius: 10rem;
  /* Adds a transition effect for all properties in 0.2s */
  transition: all 0.2s;
  position: relative;
}
.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}
.btn--white {
  background-color: #fff;
  color: #777;
}
.btn--white::after {
  border: 2px solid white;
}
.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
}
.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  /*
  Above, we have applied the following styles:

  .btn {
      position: relative;
  }

  Therefore, we now want to position the ::after pseudoelement relative to the .btn element.
  */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.header {
  height: 95vh;
  /* NB: Applying background-image is distinct from using <img> tag */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(52, 172, 224, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  /* 
      Other possible values for background-position:
      center, left, right, bottom
  ; */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}
.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}
.header .logo {
  height: 3.5rem;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
}
.heading-primary--main {
  /* Apply display: block to both parts of the heading text */
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-iteration-count: 3; */
  /* animation-delay: 3s; */
}
.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.7rem;
  animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out;
}
.heading-primary a {
  margin: 0 auto;
}

/**
 * FILEPATH: /workspaces/advanced-css-course/Natours/starter/sass/layout/_grid.scss
 * 
 * This file contains the styles for the grid layout of the Natours website.
 * It defines the classes for rows and columns, as well as their widths and margins.
 * The grid system is based on a 12-column layout, with responsive classes for different screen sizes.
 */
.row {
  max-width: 114rem;
  margin: 0 auto;
  color: white;
}
.row:not(:last-child) {
  margin-bottom: 8rem;
}
.row::after {
  content: "";
  clear: both;
  display: table;
}
.row [class^=col-] {
  float: left;
  background-color: orangered;
}
.row [class^=col-]:not(:last-child) {
  margin-right: 6rem;
}
.row .col-1-of-2 {
  width: calc((100% - 6rem) / 2);
  background-color: orangered;
  float: left;
}
.row .col-1-of-3 {
  width: calc((100% - 2 * 6rem) / 3);
}
.row .col-2-of-3 {
  width: calc(2 * (100% - 2 * 6rem) / 3 + 6rem);
}
.row .col-1-of-4 {
  width: calc((100% - 3 * 6rem) / 4);
}
.row .col-2-of-4 {
  width: calc(2 * (100% - 3 * 6rem) / 4 + 6rem);
}
.row .col-3-of-4 {
  width: calc(3 * (100% - 3 * 6rem) / 4 + 2 * 6rem);
}

/*# sourceMappingURL=style.css.map */
